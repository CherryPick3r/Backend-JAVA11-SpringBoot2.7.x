# This is a basic workflow to help you get started with Actions

name: first deploy]CI with Gradle & Deploy to EC2

# Controls when the workflow will run
on:
  push:
    branches:
      - test/EC2
    work_flow_dispatch:

  # Allows you to run this workflow manually from the Actions tab
env:
  CLIENT_ID_GOOGLE: ${{secrets.GOOGLE_CLIENT_ID}}
  REDIRECT_URI_GOOGLE: ${{secrets.GOOGLE_REDIRECT_URI}}
  SECRET_GOOGLE : ${{secrets.GOOGLE_SECRET}}

  CLIENT_ID_KAKAO: ${{secrets.KAKAO_CLIENT_ID}}
  REDIRECT_URI_KAKAO: ${{secrets.KAKAO_REDIRECT_URI}}

  DATASOURCE_URL: ${{secrets.DATASOURCE_URL}}
  DATASOURCE_USERNAME : ${{secrets.DATASOURCE_USERNAME}}
  DATASOURCE_PASSWORD: ${{secrets.DATASOURCE_PASSWORD}}

  S3_BUCKET_NAME: ${{secrets.S3_BUCKET_NAME}}
  CODE_DEPLOY_APPLICATION_NAME: ${{secrets.CODE_DEPLOY_APPLICATION_NAME}}
  CODE_DEPlOY_DEPLOYMENT_GROUP_NAME: ${{secrets.CODE_DEPlOY_DEPLOYMENT_GROUP_NAME}}
  TEST : testforEC2_yml
  working_directory: ./

permissions:
  contents: read

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      # 1)기본 체크아웃
      - name: Checkout
        uses: actions/checkout@v3

      # 2) JDK 11 세팅
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'



      # 3) gradlew 권한 설정
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        working-directory: ${{env.working-directory}}

      # 4)gradle 빌드
      - name: Build with Gradle
        run: ./gradlew clean build
        working-directory: ${{env.working-directory}}
      # AWS 인증
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          aws-region: ${{env.AWS_REGION}}

      # AWS S3에 업로드
      - name: Upload to AWS S3
        run:  |
          aws deploy push \
          --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
          --ignore-hidden-files \
          --s3-location s3://$S3_BUCKET_NAME/$GITHUB_SHA.zip \
          --source .

      # AWS EC2에 Deploy
      - name: Deploy to AWS EC2 from S3
        run: |
          aws deploy create-deployment \
            --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
            --deployment-config-name CodeDeployDefault.AllAtOnce \
            --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
            --s3-location bucket=$S3_BUCKET_NAME,key=$GITHUB_SHA.zip,bundleType=zip
